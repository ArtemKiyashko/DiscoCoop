"""
–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π —á–µ—Ä–µ–∑ —ç–º—É–ª—è—Ü–∏—é –≤–≤–æ–¥–∞
"""
import asyncio
import platform
import time
from typing import List, Dict, Any, Optional

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–æ–¥–æ–º
try:
    import pyautogui
    PYAUTOGUI_AVAILABLE = True
except ImportError:
    PYAUTOGUI_AVAILABLE = False
    pyautogui = None

try:
    from pynput import mouse, keyboard
    from pynput.mouse import Button, Listener as MouseListener  
    from pynput.keyboard import Key, Listener as KeyboardListener
    PYNPUT_AVAILABLE = True
except ImportError:
    PYNPUT_AVAILABLE = False
    mouse = keyboard = Button = MouseListener = Key = KeyboardListener = None

from ..utils.config import Config


class GameController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π —á–µ—Ä–µ–∑ —ç–º—É–ª—è—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –º—ã—à–∏"""
    
    def __init__(self, config: Config):
        self.config = config
        self.window_title = config.game.window_title
        self.action_delay = config.game.action_delay
        self.is_active = False
        self.emergency_stop = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É–ª—å—Ç–∏–¥–∏—Å–ø–ª–µ—è
        self.multi_display_config = config.game.multi_display
        self.game_screen_offset = None  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        self.game_display_info = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫
        if not PYAUTOGUI_AVAILABLE:
            raise ImportError("PyAutoGUI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: pip install PyAutoGUI")
        
        if not PYNPUT_AVAILABLE:
            print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: pynput –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PyAutoGUI
        pyautogui.PAUSE = config.game.action_delay
        pyautogui.FAILSAFE = True  # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∏ –≤ —É–≥–æ–ª –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–ª–∞–≤–∏—à (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ pynput –¥–æ—Å—Ç—É–ø–µ–Ω)
        if PYNPUT_AVAILABLE:
            self.key_mapping = {
                'space': ' ',
                'enter': '\n',
                'tab': '\t',
                'escape': Key.esc,
                'up': Key.up,
                'down': Key.down,
                'left': Key.left,
                'right': Key.right,
                'f1': Key.f1,
                'f2': Key.f2,
                'f3': Key.f3,
                'f4': Key.f4,
                'f5': Key.f5,
                'ctrl': Key.ctrl,
                'alt': Key.alt,
                'shift': Key.shift,
            }
        else:
            self.key_mapping = {}
    
    def is_game_running(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
        
        Returns:
            True –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞
        """
        try:
            if platform.system() == "Linux":
                return self._is_game_running_linux()
            elif platform.system() == "Darwin":
                return self._is_game_running_macos()
            else:  # Windows
                return self._is_game_running_windows()
                
        except Exception as e:
            print(f"Error checking game status: {e}")
            return False
    
    def _is_game_running_linux(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä—ã –≤ Linux"""
        import subprocess
        
        try:
            # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–≥—Ä—ã
            cmd = f"pgrep -f '{self.window_title.lower()}'"
            result = subprocess.run(cmd, shell=True, capture_output=True)
            
            if result.returncode == 0:
                return True
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ xdotool
            cmd = f"xdotool search --name '{self.window_title}'"
            result = subprocess.run(cmd, shell=True, capture_output=True)
            
            return result.returncode == 0 and result.stdout.strip()
            
        except Exception:
            return False
    
    def _is_game_running_macos(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä—ã –≤ macOS"""
        import subprocess
        
        try:
            cmd = f"pgrep -i '{self.window_title}'"
            result = subprocess.run(cmd, shell=True, capture_output=True)
            return result.returncode == 0
            
        except Exception:
            return False
    
    def _is_game_running_windows(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä—ã –≤ Windows"""
        try:
            import win32gui
            
            def enum_windows_callback(hwnd, windows):
                if win32gui.IsWindowVisible(hwnd):
                    window_text = win32gui.GetWindowText(hwnd)
                    if self.window_title.lower() in window_text.lower():
                        windows.append(hwnd)
                return True
            
            windows = []
            win32gui.EnumWindows(enum_windows_callback, windows)
            
            return len(windows) > 0
            
        except Exception:
            return False
    
    async def execute_actions(self, actions: List[Dict[str, Any]]) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        
        Args:
            actions: –°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        if not actions:
            return False
        
        if self.emergency_stop:
            print("Emergency stop is active, skipping actions")
            return False
        
        if not self.is_game_running():
            print("Game is not running")
            return False
        
        self.is_active = True
        success_count = 0
        
        try:
            for action in actions:
                if self.emergency_stop:
                    break
                
                success = await self._execute_single_action(action)
                if success:
                    success_count += 1
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                await asyncio.sleep(self.action_delay)
            
            return success_count == len(actions)
            
        except Exception as e:
            print(f"Error executing actions: {e}")
            return False
        
        finally:
            self.is_active = False
    
    async def _execute_single_action(self, action: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            action_type = action.get('type', '').lower()
            
            if action_type == 'click':
                return await self._action_click(action)
            elif action_type == 'move_mouse':
                return await self._action_move_mouse(action)
            elif action_type == 'key_press':
                return await self._action_key_press(action)
            elif action_type == 'type_text':
                return await self._action_type_text(action)
            elif action_type == 'scroll':
                return await self._action_scroll(action)
            elif action_type == 'drag':
                return await self._action_drag(action)
            elif action_type == 'key_combination':
                return await self._action_key_combination(action)
            else:
                print(f"Unknown action type: {action_type}")
                return False
        
        except Exception as e:
            print(f"Error executing action {action}: {e}")
            return False
    
    async def _action_click(self, action: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∏–∫–∞ –º—ã—à—å—é"""
        x = action.get('x', 0)
        y = action.get('y', 0)
        button = action.get('button', 'left')
        clicks = action.get('clicks', 1)
        
        try:
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –º—É–ª—å—Ç–∏–¥–∏—Å–ø–ª–µ—è
            adjusted_x, adjusted_y = self.adjust_coordinates(x, y)
            
            print(f"üñ±Ô∏è  –ö–ª–∏–∫: –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({x}, {y}) -> —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ({adjusted_x}, {adjusted_y})")
            
            # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –æ–∫–Ω–µ
            await self._focus_game_window()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫
            if button == 'right':
                pyautogui.rightClick(adjusted_x, adjusted_y)
                # –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
                for _ in range(clicks - 1):
                    pyautogui.rightClick(adjusted_x, adjusted_y)
            else:
                pyautogui.leftClick(adjusted_x, adjusted_y)
                # –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
                for _ in range(clicks - 1):
                    pyautogui.leftClick(adjusted_x, adjusted_y)
            
            return True
            
        except Exception as e:
            print(f"Click action failed: {e}")
            return False
    
    async def _action_move_mouse(self, action: Dict[str, Any]) -> bool:
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∏"""
        x = action.get('x', 0)
        y = action.get('y', 0)
        duration = action.get('duration', 0.5)
        
        try:
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –º—É–ª—å—Ç–∏–¥–∏—Å–ø–ª–µ—è
            adjusted_x, adjusted_y = self.adjust_coordinates(x, y)
            pyautogui.moveTo(adjusted_x, adjusted_y, duration=duration)
            return True
            
        except Exception as e:
            print(f"Move mouse action failed: {e}")
            return False
    
    async def _action_key_press(self, action: Dict[str, Any]) -> bool:
        """–ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        key = action.get('key', '')
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á
            mapped_key = self.key_mapping.get(key.lower(), key)
            
            # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –∏–≥—Ä–µ
            await self._focus_game_window()
            
            if isinstance(mapped_key, str):
                pyautogui.press(mapped_key)
            else:
                # –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à –∏—Å–ø–æ–ª—å–∑—É–µ–º pynput
                keyboard_controller = keyboard.Controller()
                keyboard_controller.press(mapped_key)
                keyboard_controller.release(mapped_key)
            
            return True
            
        except Exception as e:
            print(f"Key press action failed: {e}")
            return False
    
    async def _action_type_text(self, action: Dict[str, Any]) -> bool:
        """–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
        text = action.get('text', '')
        interval = action.get('interval', 0.05)
        
        try:
            await self._focus_game_window()
            pyautogui.typewrite(text, interval=interval)
            return True
            
        except Exception as e:
            print(f"Type text action failed: {e}")
            return False
    
    async def _action_scroll(self, action: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞"""
        direction = action.get('direction', 'up')
        amount = action.get('amount', 3)
        x = action.get('x')
        y = action.get('y')
        
        try:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è —Ç—É–¥–∞
            if x is not None and y is not None:
                pyautogui.moveTo(x, y)
            
            scroll_amount = amount if direction == 'up' else -amount
            pyautogui.scroll(scroll_amount)
            
            return True
            
        except Exception as e:
            print(f"Scroll action failed: {e}")
            return False
    
    async def _action_drag(self, action: Dict[str, Any]) -> bool:
        """–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ"""
        from_x = action.get('from_x', 0)
        from_y = action.get('from_y', 0)
        to_x = action.get('to_x', 0)
        to_y = action.get('to_y', 0)
        duration = action.get('duration', 1.0)
        
        try:
            await self._focus_game_window()
            pyautogui.dragTo(to_x, to_y, duration=duration, button='left')
            return True
            
        except Exception as e:
            print(f"Drag action failed: {e}")
            return False
    
    async def _action_key_combination(self, action: Dict[str, Any]) -> bool:
        """–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–ª–∞–≤–∏—à"""
        keys = action.get('keys', [])
        
        if not keys:
            return False
        
        try:
            await self._focus_game_window()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª–∞–≤–∏—à–∏
            mapped_keys = []
            for key in keys:
                mapped_key = self.key_mapping.get(key.lower(), key)
                mapped_keys.append(mapped_key)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pyautogui –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
            if len(mapped_keys) <= 3:
                pyautogui.hotkey(*mapped_keys)
            
            return True
            
        except Exception as e:
            print(f"Key combination action failed: {e}")
            return False
    
    async def _focus_game_window(self) -> bool:
        """–§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ–∫–Ω–µ –∏–≥—Ä—ã"""
        try:
            if platform.system() == "Linux":
                return await self._focus_window_linux()
            elif platform.system() == "Darwin":
                return await self._focus_window_macos()
            else:  # Windows
                return await self._focus_window_windows()
                
        except Exception as e:
            print(f"Error focusing game window: {e}")
            return False
    
    async def _focus_window_linux(self) -> bool:
        """–§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –æ–∫–Ω–∞ –≤ Linux"""
        import subprocess
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º ID –æ–∫–Ω–∞
            cmd = f"xdotool search --name '{self.window_title}'"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.returncode == 0 and result.stdout.strip():
                window_id = result.stdout.strip().split('\n')[0]
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫–Ω–æ
                subprocess.run(f"xdotool windowactivate {window_id}", shell=True)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                await asyncio.sleep(0.1)
                
                return True
            
            return False
            
        except Exception:
            return False
    
    async def _focus_window_macos(self) -> bool:
        """–§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –æ–∫–Ω–∞ –≤ macOS"""
        # –í macOS —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–µ–µ, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
        return True
    
    async def _focus_window_windows(self) -> bool:
        """–§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –æ–∫–Ω–∞ –≤ Windows"""
        try:
            import win32gui
            import win32con
            
            def enum_windows_callback(hwnd, windows):
                if win32gui.IsWindowVisible(hwnd):
                    window_text = win32gui.GetWindowText(hwnd)
                    if self.window_title.lower() in window_text.lower():
                        windows.append(hwnd)
                return True
            
            windows = []
            win32gui.EnumWindows(enum_windows_callback, windows)
            
            if windows:
                hwnd = windows[0]
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫–Ω–æ
                win32gui.SetForegroundWindow(hwnd)
                win32gui.ShowWindow(hwnd, win32con.SW_RESTORE)
                
                await asyncio.sleep(0.1)
                return True
            
            return False
            
        except Exception:
            return False
    
    async def stop_all_actions(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        self.emergency_stop = True
        self.is_active = False
        
        print("Emergency stop activated - all game actions stopped")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        await asyncio.sleep(0.5)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        await asyncio.sleep(2)
        self.emergency_stop = False
    
    def get_screen_size(self) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞"""
        return pyautogui.size()
    
    def get_mouse_position(self) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏"""
        return pyautogui.position()
    
    def detect_game_display(self) -> Optional[Dict[str, Any]]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è –≥–¥–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–ø–ª–µ–µ —Å –∏–≥—Ä–æ–π –∏–ª–∏ None
        """
        try:
            if not self.multi_display_config.auto_detect_game_screen:
                return None
            
            if platform.system() == "Linux":
                return self._detect_game_display_linux()
            elif platform.system() == "Darwin":
                return self._detect_game_display_macos()
            else:  # Windows
                return self._detect_game_display_windows()
                
        except Exception as e:
            print(f"Error detecting game display: {e}")
            return None
    
    def _detect_game_display_linux(self) -> Optional[Dict[str, Any]]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è —Å –∏–≥—Ä–æ–π –≤ Linux"""
        import subprocess
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –¥–∏—Å–ø–ª–µ—è—Ö
            displays_cmd = "xrandr --listmonitors"
            result = subprocess.run(displays_cmd, shell=True, capture_output=True, text=True)
            
            if result.returncode != 0:
                return None
            
            displays = []
            for line in result.stdout.split('\n')[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if line.strip():
                    parts = line.strip().split()
                    if len(parts) >= 4:
                        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞: "0: +*eDP-1 1280/309x800/193+0+0  eDP-1"
                        geometry = parts[2]  # –Ω–∞–ø—Ä–∏–º–µ—Ä "1280/309x800/193+0+0"
                        if 'x' in geometry and '+' in geometry:
                            size_part = geometry.split('+')[0]  # "1280/309x800/193"
                            offset_parts = geometry.split('+')[1:]  # ["0", "0"]
                            
                            if '/' in size_part:
                                width_part = size_part.split('x')[0]  # "1280/309"
                                height_part = size_part.split('x')[1]  # "800/193"
                                width = int(width_part.split('/')[0])
                                height = int(height_part.split('/')[0])
                                x_offset = int(offset_parts[0])
                                y_offset = int(offset_parts[1])
                                
                                displays.append({
                                    'name': parts[-1],
                                    'width': width,
                                    'height': height,
                                    'x': x_offset,
                                    'y': y_offset,
                                    'primary': '*' in line
                                })
            
            # –ò—â–µ–º –æ–∫–Ω–æ –∏–≥—Ä—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–º –¥–∏—Å–ø–ª–µ–µ –æ–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
            window_cmd = f"xdotool search --name '{self.window_title}'"
            window_result = subprocess.run(window_cmd, shell=True, capture_output=True, text=True)
            
            if window_result.returncode == 0 and window_result.stdout.strip():
                window_id = window_result.stdout.strip().split('\n')[0]
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞
                geometry_cmd = f"xdotool getwindowgeometry {window_id}"
                geom_result = subprocess.run(geometry_cmd, shell=True, capture_output=True, text=True)
                
                if geom_result.returncode == 0:
                    # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ getwindowgeometry
                    for line in geom_result.stdout.split('\n'):
                        if 'Position:' in line:
                            pos_str = line.split('Position:')[1].strip()
                            if ',' in pos_str:
                                window_x = int(pos_str.split(',')[0])
                                window_y = int(pos_str.split(',')[1])
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–º –¥–∏—Å–ø–ª–µ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–∫–Ω–æ
                                for display in displays:
                                    if (display['x'] <= window_x < display['x'] + display['width'] and
                                        display['y'] <= window_y < display['y'] + display['height']):
                                        
                                        print(f"üéÆ –ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –¥–∏—Å–ø–ª–µ–µ {display['name']}: {display['width']}x{display['height']} +{display['x']}+{display['y']}")
                                        return display
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–∫–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–ø–ª–µ–π
            primary_display = next((d for d in displays if d.get('primary')), displays[0] if displays else None)
            if primary_display:
                print(f"üñ•Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–ø–ª–µ–π: {primary_display['name']}")
            
            return primary_display
            
        except Exception as e:
            print(f"Error detecting Linux display: {e}")
            return None
    
    def _detect_game_display_macos(self) -> Optional[Dict[str, Any]]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è —Å –∏–≥—Ä–æ–π –≤ macOS"""
        # –í macOS –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        return {
            'name': 'main',
            'width': 1920, 
            'height': 1080,
            'x': 0,
            'y': 0,
            'primary': True
        }
    
    def _detect_game_display_windows(self) -> Optional[Dict[str, Any]]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è —Å –∏–≥—Ä–æ–π –≤ Windows"""
        try:
            import win32gui
            import win32api
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö
            monitors = win32api.EnumDisplayMonitors()
            
            # –ò—â–µ–º –æ–∫–Ω–æ –∏–≥—Ä—ã
            def enum_windows_callback(hwnd, windows):
                if win32gui.IsWindowVisible(hwnd):
                    window_text = win32gui.GetWindowText(hwnd)
                    if self.window_title.lower() in window_text.lower():
                        windows.append(hwnd)
                return True
            
            windows = []
            win32gui.EnumWindows(enum_windows_callback, windows)
            
            if windows:
                hwnd = windows[0]
                rect = win32gui.GetWindowRect(hwnd)
                window_x, window_y = rect[0], rect[1]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–∫–Ω–æ
                for i, monitor in enumerate(monitors):
                    monitor_info = win32api.GetMonitorInfo(monitor[0])
                    work_area = monitor_info['Work']
                    
                    if (work_area[0] <= window_x < work_area[2] and
                        work_area[1] <= window_y < work_area[3]):
                        
                        return {
                            'name': f'Monitor_{i}',
                            'width': work_area[2] - work_area[0],
                            'height': work_area[3] - work_area[1], 
                            'x': work_area[0],
                            'y': work_area[1],
                            'primary': i == 0
                        }
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä
            if monitors:
                monitor_info = win32api.GetMonitorInfo(monitors[0][0])
                work_area = monitor_info['Work']
                return {
                    'name': 'Primary',
                    'width': work_area[2] - work_area[0],
                    'height': work_area[3] - work_area[1],
                    'x': work_area[0], 
                    'y': work_area[1],
                    'primary': True
                }
                
        except Exception as e:
            print(f"Error detecting Windows display: {e}")
            
        return None
    
    def adjust_coordinates(self, x: int, y: int) -> tuple:
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å —É—á–µ—Ç–æ–º –º—É–ª—å—Ç–∏–¥–∏—Å–ø–ª–µ—è
        
        Args:
            x, y: –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–∫–Ω–∞)
            
        Returns:
            –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è
        """
        # –ï—Å–ª–∏ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–ø–ª–µ–µ
        if self.multi_display_config.auto_detect_game_screen:
            if self.game_display_info is None:
                self.game_display_info = self.detect_game_display()
            
            if self.game_display_info:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è
                x += self.game_display_info['x']
                y += self.game_display_info['y']
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä—É—á–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        x += self.multi_display_config.coordinate_offset['x']
        y += self.multi_display_config.coordinate_offset['y']
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        x = int(x * self.multi_display_config.display_scaling)
        y = int(y * self.multi_display_config.display_scaling)
        
        return x, y