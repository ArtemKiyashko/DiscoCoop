"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞ –∏ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
"""
import asyncio
import platform
from typing import Optional, Tuple, Dict, Any
from PIL import Image, ImageGrab
import cv2
import numpy as np

from ..utils.config import Config
from ..llm.agent import LLMAgent


class ScreenAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏–≥—Ä—ã"""
    
    def __init__(self, config: Config):
        self.config = config
        self.llm_agent = LLMAgent(config)
        self.window_title = config.game.window_title
        self.last_screenshot = None
        self.last_screenshot_time = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        try:
            from .element_detector import GameElementDetector
            self.element_detector = GameElementDetector()
            print("‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ ScreenAnalyzer")
        except Exception as e:
            print(f"‚ö†Ô∏è –î–µ—Ç–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ ScreenAnalyzer: {e}")
            self.element_detector = None
    
    async def take_screenshot(self) -> Optional[Image.Image]:
        """
        –ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–∫–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Steam Deck/Linux)
        
        Returns:
            PIL Image –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –¢–æ–ª—å–∫–æ –¥–ª—è Steam Deck (Linux)
            if platform.system() != "Linux":
                print("‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ Steam Deck (Linux)")
                return None
                
            return await self._take_screenshot_linux()
                
        except Exception as e:
            print(f"Error taking screenshot: {e}")
            return None
    
    async def _take_screenshot_linux(self) -> Optional[Image.Image]:
        """–ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ Linux (Steam Deck)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –æ–∫–Ω–∞
            import subprocess
            import tempfile
            import os
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è Steam Deck
            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
                cmd_screenshot = f"screenshot-tool {tmp_file.name} '{self.window_title}'"
                print(f"üì∏ –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç: {cmd_screenshot}")
                
                result = subprocess.run(
                    cmd_screenshot, 
                    shell=True, 
                    check=True, 
                    capture_output=True, 
                    text=True,
                    timeout=10  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
                )
                
                print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: {tmp_file.name}")
                if result.stdout:
                    print(f"üìù –í—ã–≤–æ–¥: {result.stdout.strip()}")
                
                screenshot = Image.open(tmp_file.name)
                print(f"üñºÔ∏è  –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {screenshot.size}")
                os.unlink(tmp_file.name)
                return screenshot
                
        except Exception as e:
            error_msg = str(e)
            print(f"Linux screenshot error: {error_msg}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –¥–∞–µ–º —Å–æ–≤–µ—Ç—ã
            if "screenshot-tool" in error_msg or "convert" in error_msg or "xwd" in error_msg:
                print("üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.")
                print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./install.sh --reinstall")
                print("   –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: sudo pacman -S grim (–¥–ª—è Wayland) –∏–ª–∏ scrot (–¥–ª—è X11)")
            
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞
            try:
                return ImageGrab.grab()
            except Exception as fallback_e:
                print(f"Fallback screenshot also failed: {fallback_e}")
                return None
    

    async def describe_screen(self, screenshot: Optional[Image.Image] = None) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        
        Args:
            screenshot: –ì–æ—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç (–µ—Å–ª–∏ None, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π)
        
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if screenshot is None:
                screenshot = await self.take_screenshot()
            
            if not screenshot:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM
            screenshot = self._optimize_screenshot(screenshot)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤
            self.last_screenshot = screenshot
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ LLM
            description = await self.llm_agent.describe_screen(screenshot)
            
            return description
            
        except Exception as e:
            print(f"Error describing screen: {e}")
            return None
    
    def _optimize_screenshot(self, screenshot: Image.Image) -> Image.Image:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM
        –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            screenshot: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            
        Returns:
            –°–∫—Ä–∏–Ω—à–æ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGB –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        """
        print(f"üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {screenshot.size}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if screenshot.mode != 'RGB':
            screenshot = screenshot.convert('RGB')
        
        return screenshot
    
    def _get_game_window_size(self) -> Optional[tuple]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ xdotool –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (width, height) –∏–ª–∏ None –µ—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        if platform.system() != 'Linux':
            print("‚ö†Ô∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ Linux")
            return None
            
        try:
            import subprocess
            
            # –ü–æ–∏—Å–∫ –æ–∫–Ω–∞ Disco Elysium
            search_patterns = ['Disco', 'disco', 'Elysium']
            
            for pattern in search_patterns:
                try:
                    result = subprocess.run(
                        ['xdotool', 'search', '--name', pattern],
                        capture_output=True, text=True, timeout=5
                    )
                    
                    if result.returncode == 0 and result.stdout.strip():
                        window_ids = result.stdout.strip().split('\n')
                        
                        for window_id in window_ids:
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–∫–Ω–∞
                                geometry_result = subprocess.run(
                                    ['xdotool', 'getwindowgeometry', window_id],
                                    capture_output=True, text=True, timeout=2
                                )
                                
                                if geometry_result.returncode == 0:
                                    # –ü–∞—Ä—Å–∏–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –≤—ã–≤–æ–¥–∞ xdotool
                                    # –§–æ—Ä–º–∞—Ç: "Geometry: 1280x800+0+0"
                                    for line in geometry_result.stdout.split('\n'):
                                        if 'Geometry:' in line:
                                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
                                            geometry = line.split('Geometry:')[1].strip()
                                            size_part = geometry.split('+')[0]  # "1280x800"
                                            width, height = map(int, size_part.split('x'))
                                            print(f"üéÆ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–≥—Ä—ã: {width}x{height}")
                                            return (width, height)
                            except (subprocess.TimeoutExpired, ValueError, IndexError):
                                continue
                                
                except subprocess.TimeoutExpired:
                    continue
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –∏–≥—Ä—ã: {e}")
            
        print("‚ö†Ô∏è  –û–∫–Ω–æ –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–∞–∑–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
        return None
    
    def get_game_resolution(self) -> Tuple[int, int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (width, height) - —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–∫–Ω–∞ –∏–≥—Ä—ã
        """
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–≥—Ä—ã
        game_window_size = self._get_game_window_size()
        if game_window_size:
            return game_window_size
            
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        if self.last_screenshot:
            width, height = self.last_screenshot.size
            print(f"üìê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {width}x{height}")
            return (width, height)
            
        # Fallback - —Ç–∏–ø–∏—á–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è Steam Deck
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–≥—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1280x800")
        return (1280, 800)
    
    def find_ui_elements(self, screenshot: Optional[Image.Image] = None) -> dict:
        """
        –ü–æ–∏—Å–∫ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ
        
        Args:
            screenshot: –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ UI
        """
        if screenshot is None:
            screenshot = self.last_screenshot
        
        if not screenshot:
            return {}
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
            cv_image = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
            
            elements = {}
            
            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            elements['buttons'] = self._find_buttons(cv_image)
            
            # –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
            elements['text_areas'] = self._find_text_areas(cv_image)
            
            # –ü–æ–∏—Å–∫ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–æ–Ω
            elements['dialogs'] = self._find_dialogs(cv_image)
            
            return elements
            
        except Exception as e:
            print(f"Error finding UI elements: {e}")
            return {}
    
    def _find_buttons(self, cv_image) -> list:
        """–ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        buttons = []
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        
        # –ü–æ–∏—Å–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫)
        edges = cv2.Canny(gray, 50, 150)
        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        for contour in contours:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
            area = cv2.contourArea(contour)
            if 500 < area < 10000:  # –†–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏
                x, y, w, h = cv2.boundingRect(contour)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ (–∫–Ω–æ–ø–∫–∏ –æ–±—ã—á–Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Ç—è–Ω—É—Ç—ã–µ)
                aspect_ratio = w / h
                if 0.3 < aspect_ratio < 4:
                    buttons.append({
                        'x': x + w // 2,
                        'y': y + h // 2,
                        'width': w,
                        'height': h,
                        'confidence': min(area / 1000, 1.0)
                    })
        
        return buttons
    
    def _find_text_areas(self, cv_image) -> list:
        """–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π"""
        text_areas = []
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å OCR –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        
        return text_areas
    
    def _find_dialogs(self, cv_image) -> list:
        """–ü–æ–∏—Å–∫ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–æ–Ω"""
        dialogs = []
        
        # –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π (–¥–∏–∞–ª–æ–≥–∏)
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        edges = cv2.Canny(gray, 30, 100)
        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        for contour in contours:
            area = cv2.contourArea(contour)
            if area > 20000:  # –ë–æ–ª—å—à–∏–µ –æ–±–ª–∞—Å—Ç–∏
                x, y, w, h = cv2.boundingRect(contour)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–∏–∞–ª–æ–≥
                aspect_ratio = w / h
                if 0.5 < aspect_ratio < 3:
                    dialogs.append({
                        'x': x,
                        'y': y,
                        'width': w,
                        'height': h,
                        'center_x': x + w // 2,
                        'center_y': y + h // 2
                    })
        
        return dialogs
    
    async def find_element_precise(self, target: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–æ—á–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä
        
        Args:
            target: –ù–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ —Å —Ç–æ—á–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        """
        if not self.element_detector:
            print("‚ö†Ô∏è –î–µ—Ç–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        try:
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot = await self.take_screenshot()
            if not screenshot:
                return None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
            element = self.element_detector.find_element(screenshot, target)
            
            if element:
                return {
                    'coordinates': (element.center_x, element.center_y),
                    'description': f"–≠–ª–µ–º–µ–Ω—Ç {target}",
                    'method': element.method,
                    'confidence': element.confidence
                }
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ '{target}': {e}")
            return None
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if hasattr(self, 'llm_agent'):
            await self.llm_agent.close()