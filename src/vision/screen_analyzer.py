"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞ –∏ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
"""
import asyncio
import platform
from typing import Optional, Tuple
from PIL import Image, ImageGrab
import cv2
import numpy as np

from ..utils.config import Config
from ..llm.agent import LLMAgent


class ScreenAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏–≥—Ä—ã"""
    
    def __init__(self, config: Config):
        self.config = config
        self.llm_agent = LLMAgent(config)
        self.window_title = config.game.window_title
        self.last_screenshot = None
        self.last_screenshot_time = 0
    
    async def take_screenshot(self) -> Optional[Image.Image]:
        """
        –ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        
        Returns:
            PIL Image –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –î–ª—è Steam Deck (Linux) –∏ –æ–±—â–∏–π —Å–ª—É—á–∞–π
            if platform.system() == "Linux":
                return await self._take_screenshot_linux()
            elif platform.system() == "Darwin":  # macOS
                return await self._take_screenshot_macos()
            else:  # Windows
                return await self._take_screenshot_windows()
                
        except Exception as e:
            print(f"Error taking screenshot: {e}")
            return None
    
    async def _take_screenshot_linux(self) -> Optional[Image.Image]:
        """–ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ Linux (Steam Deck)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –æ–∫–Ω–∞
            import subprocess
            import tempfile
            import os
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ–∫–Ω–æ –∏–≥—Ä—ã
            cmd_find = f"xdotool search --name '{self.window_title}'"
            result = subprocess.run(cmd_find, shell=True, capture_output=True, text=True)
            
            if result.returncode != 0 or not result.stdout.strip():
                # –ï—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
                screenshot = ImageGrab.grab()
                return screenshot
            
            # –ü–æ–ª—É—á–∞–µ–º ID –æ–∫–Ω–∞
            window_id = result.stdout.strip().split('\n')[0]
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞
            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                cmd_screenshot = f"screenshot-tool {tmp_file.name}"
                print(f"üì∏ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {cmd_screenshot}")
                try:
                    result = subprocess.run(cmd_screenshot, shell=True, check=True, capture_output=True, text=True)
                    print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: {tmp_file.name}")
                    screenshot = Image.open(tmp_file.name)
                    print(f"üñºÔ∏è  –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {screenshot.size}")
                    os.unlink(tmp_file.name)
                    return screenshot
                except:
                    # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
                    if subprocess.run("which xwd", shell=True, capture_output=True).returncode == 0:
                        cmd_screenshot = f"xwd -id {window_id} | convert xwd:- {tmp_file.name}"
                        subprocess.run(cmd_screenshot, shell=True, check=True)
                        screenshot = Image.open(tmp_file.name)
                        os.unlink(tmp_file.name)
                        return screenshot
                    else:
                        raise
                
        except Exception as e:
            error_msg = str(e)
            print(f"Linux screenshot error: {error_msg}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –¥–∞–µ–º —Å–æ–≤–µ—Ç—ã
            if "screenshot-tool" in error_msg or "convert" in error_msg or "xwd" in error_msg:
                print("üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.")
                print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./install.sh --reinstall")
                print("   –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: sudo pacman -S grim (–¥–ª—è Wayland) –∏–ª–∏ scrot (–¥–ª—è X11)")
            
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞
            try:
                return ImageGrab.grab()
            except Exception as fallback_e:
                print(f"Fallback screenshot also failed: {fallback_e}")
                return None
    
    async def _take_screenshot_macos(self) -> Optional[Image.Image]:
        """–ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ macOS"""
        try:
            # –í macOS –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞
            screenshot = ImageGrab.grab()
            return screenshot
            
        except Exception as e:
            print(f"macOS screenshot error: {e}")
            return None
    
    async def _take_screenshot_windows(self) -> Optional[Image.Image]:
        """–ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ Windows"""
        try:
            import win32gui
            import win32ui
            import win32con
            
            # –ò—â–µ–º –æ–∫–Ω–æ –∏–≥—Ä—ã
            hwnd = win32gui.FindWindow(None, self.window_title)
            
            if hwnd == 0:
                # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
                def enum_windows_callback(hwnd, windows):
                    if win32gui.IsWindowVisible(hwnd):
                        window_text = win32gui.GetWindowText(hwnd)
                        if self.window_title.lower() in window_text.lower():
                            windows.append(hwnd)
                    return True
                
                windows = []
                win32gui.EnumWindows(enum_windows_callback, windows)
                
                if not windows:
                    # Fallback –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
                    return ImageGrab.grab()
                
                hwnd = windows[0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
            rect = win32gui.GetWindowRect(hwnd)
            width = rect[2] - rect[0]
            height = rect[3] - rect[1]
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            hwndDC = win32gui.GetWindowDC(hwnd)
            mfcDC = win32ui.CreateDCFromHandle(hwndDC)
            saveDC = mfcDC.CreateCompatibleDC()
            
            # –°–æ–∑–¥–∞–µ–º bitmap
            saveBitMap = win32ui.CreateBitmap()
            saveBitMap.CreateCompatibleBitmap(mfcDC, width, height)
            saveDC.SelectObject(saveBitMap)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–∫–Ω–∞
            saveDC.BitBlt((0, 0), (width, height), mfcDC, (0, 0), win32con.SRCCOPY)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            bmpinfo = saveBitMap.GetInfo()
            bmpstr = saveBitMap.GetBitmapBits(True)
            screenshot = Image.frombuffer(
                'RGB',
                (bmpinfo['bmWidth'], bmpinfo['bmHeight']),
                bmpstr, 'raw', 'BGRX', 0, 1
            )
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            win32gui.DeleteObject(saveBitMap.GetHandle())
            saveDC.DeleteDC()
            mfcDC.DeleteDC()
            win32gui.ReleaseDC(hwnd, hwndDC)
            
            return screenshot
            
        except Exception as e:
            print(f"Windows screenshot error: {e}")
            # Fallback –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
            return ImageGrab.grab()
    
    async def describe_screen(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            screenshot = await self.take_screenshot()
            
            if not screenshot:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM
            screenshot = self._optimize_screenshot(screenshot)
            
            # –ö–µ—à–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            self.last_screenshot = screenshot
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ LLM
            description = await self.llm_agent.describe_screen(screenshot)
            
            return description
            
        except Exception as e:
            print(f"Error describing screen: {e}")
            return None
    
    def _optimize_screenshot(self, screenshot: Image.Image) -> Image.Image:
        """
        –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM
        
        Args:
            screenshot: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            
        Returns:
            –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        target_width = self.config.game.screen_resolution['width']
        target_height = self.config.game.screen_resolution['height']
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        screenshot.thumbnail((target_width, target_height), Image.Resampling.LANCZOS)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if screenshot.mode != 'RGB':
            screenshot = screenshot.convert('RGB')
        
        return screenshot
    
    def find_ui_elements(self, screenshot: Optional[Image.Image] = None) -> dict:
        """
        –ü–æ–∏—Å–∫ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ
        
        Args:
            screenshot: –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ UI
        """
        if screenshot is None:
            screenshot = self.last_screenshot
        
        if not screenshot:
            return {}
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
            cv_image = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
            
            elements = {}
            
            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            elements['buttons'] = self._find_buttons(cv_image)
            
            # –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
            elements['text_areas'] = self._find_text_areas(cv_image)
            
            # –ü–æ–∏—Å–∫ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–æ–Ω
            elements['dialogs'] = self._find_dialogs(cv_image)
            
            return elements
            
        except Exception as e:
            print(f"Error finding UI elements: {e}")
            return {}
    
    def _find_buttons(self, cv_image) -> list:
        """–ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        buttons = []
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        
        # –ü–æ–∏—Å–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫)
        edges = cv2.Canny(gray, 50, 150)
        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        for contour in contours:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
            area = cv2.contourArea(contour)
            if 500 < area < 10000:  # –†–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏
                x, y, w, h = cv2.boundingRect(contour)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ (–∫–Ω–æ–ø–∫–∏ –æ–±—ã—á–Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Ç—è–Ω—É—Ç—ã–µ)
                aspect_ratio = w / h
                if 0.3 < aspect_ratio < 4:
                    buttons.append({
                        'x': x + w // 2,
                        'y': y + h // 2,
                        'width': w,
                        'height': h,
                        'confidence': min(area / 1000, 1.0)
                    })
        
        return buttons
    
    def _find_text_areas(self, cv_image) -> list:
        """–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π"""
        text_areas = []
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å OCR –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        
        return text_areas
    
    def _find_dialogs(self, cv_image) -> list:
        """–ü–æ–∏—Å–∫ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–æ–Ω"""
        dialogs = []
        
        # –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π (–¥–∏–∞–ª–æ–≥–∏)
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        edges = cv2.Canny(gray, 30, 100)
        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        for contour in contours:
            area = cv2.contourArea(contour)
            if area > 20000:  # –ë–æ–ª—å—à–∏–µ –æ–±–ª–∞—Å—Ç–∏
                x, y, w, h = cv2.boundingRect(contour)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–∏–∞–ª–æ–≥
                aspect_ratio = w / h
                if 0.5 < aspect_ratio < 3:
                    dialogs.append({
                        'x': x,
                        'y': y,
                        'width': w,
                        'height': h,
                        'center_x': x + w // 2,
                        'center_y': y + h // 2
                    })
        
        return dialogs
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if hasattr(self, 'llm_agent'):
            await self.llm_agent.close()