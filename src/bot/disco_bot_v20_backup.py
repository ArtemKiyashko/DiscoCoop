"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π Disco Elysium
"""
import asyncio
import json
import time
from typing import Dict, List, Optional
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    Filters,
    CallbackContext
)
from loguru import logger

from ..utils.config import Config
from ..llm.agent import LLMAgent
from ..vision.screen_analyzer import ScreenAnalyzer
from ..game.controller import GameController


class DiscoCoopBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è Disco Coop"""
    
    def __init__(self, config: Config):
        self.config = config
        self.llm_agent = LLMAgent(config)
        self.screen_analyzer = ScreenAnalyzer(config)
        self.game_controller = GameController(config)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞
        self.chat_last_command: Dict[int, datetime] = {}
        self.chat_command_count: Dict[int, int] = {}
        self.active_sessions: Dict[int, datetime] = {}
        
        # –°–æ–∑–¥–∞–µ–º updater
        self.updater = Updater(token=config.telegram.bot_token, use_context=True)
        self.dispatcher = self.updater.dispatcher
        
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dispatcher.add_handler(CommandHandler("start", self.start_command))
        self.dispatcher.add_handler(CommandHandler("help", self.help_command))
        self.dispatcher.add_handler(CommandHandler("describe", self.describe_command))
        self.dispatcher.add_handler(CommandHandler("status", self.status_command))
        self.dispatcher.add_handler(CommandHandler("stop_game", self.emergency_stop))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        self.dispatcher.add_handler(
            MessageHandler(Filters.text & ~Filters.command, self.handle_game_command)
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.dispatcher.add_handler(CallbackQueryHandler(self.button_callback))
    
    def _is_authorized_chat(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞"""
        return chat_id in self.config.telegram.allowed_chats
    
    def _check_rate_limit(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∫–æ–º–∞–Ω–¥"""
        now = datetime.now()
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        if chat_id not in self.chat_last_command or \
           (now - self.chat_last_command[chat_id]).total_seconds() > 60:
            self.chat_command_count[chat_id] = 0
            self.chat_last_command[chat_id] = now
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if self.chat_command_count[chat_id] >= self.config.security.rate_limit:
            return False
        
        self.chat_command_count[chat_id] += 1
        return True
    
    def start_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        chat_id = update.effective_chat.id
        
        if not self._is_authorized_chat(chat_id):
            update.message.reply_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."
            )
            return
        
        welcome_text = """
üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Disco Coop!**

–Ø –±–æ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∏–≥—Ä—ã –≤ Disco Elysium. –í—ã –º–æ–∂–µ—Ç–µ:

‚Ä¢ –ü–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ–±—ã—á–Ω—ã–º —è–∑—ã–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ø–æ–¥–æ–π—Ç–∏ –∫ –¥–≤–µ—Ä–∏", "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–∞—Ä–º–µ–Ω–æ–º")
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/describe` —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/help` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
        """
        
        keyboard = [
            [InlineKeyboardButton("üìñ –û–ø–∏—Å–∞—Ç—å —ç–∫—Ä–∞–Ω", callback_data="describe")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã", callback_data="status")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            welcome_text, 
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
        self.active_sessions[chat_id] = datetime.now()
        logger.info(f"Started session for chat {chat_id}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üéÆ **Disco Coop - –°–ø—Ä–∞–≤–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/describe` - –û–ø–∏—Å–∞—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
‚Ä¢ `/status` - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –∏ –±–æ—Ç–∞
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø—Ä–∏–º–µ—Ä—ã):**
‚Ä¢ "–ø–æ–¥–æ–π—Ç–∏ –∫ –¥–≤–µ—Ä–∏"
‚Ä¢ "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–∞—Ä–º–µ–Ω"
‚Ä¢ "–æ—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"
‚Ä¢ "–ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É"
‚Ä¢ "–≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–∏–∞–ª–æ–≥–∞"
‚Ä¢ "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É"

**–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º {} –∫–æ–º–∞–Ω–¥ –≤ –º–∏–Ω—É—Ç—É –Ω–∞ —á–∞—Ç
‚Ä¢ –°–µ—Å—Å–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {} –º–∏–Ω—É—Ç
‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: `{}`

**–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:** {}
        """.format(
            self.config.security.rate_limit,
            self.config.security.max_session_time,
            self.config.security.emergency_stop_command,
            "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if self.game_controller.is_game_running() else "üî¥ –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def describe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /describe - –æ–ø–∏—Å–∞—Ç—å —ç–∫—Ä–∞–Ω"""
        chat_id = update.effective_chat.id
        
        if not self._is_authorized_chat(chat_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        if not self._check_rate_limit(chat_id):
            await update.message.reply_text("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
        await update.message.reply_text("üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç–∫—Ä–∞–Ω...")
        
        try:
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            description = await self.screen_analyzer.describe_screen()
            
            if description:
                await update.message.reply_text(f"üëÅÔ∏è **–ù–∞ —ç–∫—Ä–∞–Ω–µ:**\n{description}", parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
        
        except Exception as e:
            logger.error(f"Error in describe_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —ç–∫—Ä–∞–Ω–∞.")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        chat_id = update.effective_chat.id
        
        if not self._is_authorized_chat(chat_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        game_status = "üü¢ –ó–∞–ø—É—â–µ–Ω–∞" if self.game_controller.is_game_running() else "üî¥ –ù–µ –Ω–∞–π–¥–µ–Ω–∞"
        llm_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if await self.llm_agent.is_available() else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        session_time = ""
        if chat_id in self.active_sessions:
            elapsed = datetime.now() - self.active_sessions[chat_id]
            session_time = f"‚è±Ô∏è –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {elapsed.seconds // 60} –º–∏–Ω"
        
        status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**

üéÆ –ò–≥—Ä–∞: {game_status}
ü§ñ LLM: {llm_status}
üí¨ –ß–∞—Ç: {"üü¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" if self._is_authorized_chat(chat_id) else "üî¥ –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}
{session_time}

üìã –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.chat_command_count.get(chat_id, 0)}
‚è≥ –õ–∏–º–∏—Ç: {self.config.security.rate_limit}/–º–∏–Ω
        """
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def handle_game_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        chat_id = update.effective_chat.id
        user_command = update.message.text
        
        if not self._is_authorized_chat(chat_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        if not self._check_rate_limit(chat_id):
            await update.message.reply_text("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
            return
        
        if not self.game_controller.is_game_running():
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        processing_msg = await update.message.reply_text("üéÆ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            screenshot = await self.screen_analyzer.take_screenshot()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ LLM
            result = await self.llm_agent.process_command(user_command, screenshot)
            
            if result and result.get('actions'):
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏–≥—Ä–µ
                success = await self.game_controller.execute_actions(result['actions'])
                
                if success:
                    response = f"‚úÖ {result.get('description', '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')}"
                else:
                    response = "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏"
            else:
                response = "‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            await processing_msg.edit_text(response)
            
        except Exception as e:
            logger.error(f"Error processing command '{user_command}': {e}")
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "describe":
            await self.describe_command(update, context)
        elif query.data == "status":
            await self.status_command(update, context)
        elif query.data == "help":
            await self.help_command(update, context)
    
    async def emergency_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        user_id = update.effective_user.id
        
        if user_id not in self.config.telegram.admin_users:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        await self.game_controller.stop_all_actions()
        
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        self.active_sessions.clear()
        
        await update.message.reply_text("üõë –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        logger.warning(f"Emergency stop triggered by user {user_id}")
    
    async def cleanup_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π"""
        now = datetime.now()
        max_time = timedelta(minutes=self.config.security.max_session_time)
        
        expired_sessions = [
            chat_id for chat_id, start_time in self.active_sessions.items()
            if now - start_time > max_time
        ]
        
        for chat_id in expired_sessions:
            del self.active_sessions[chat_id]
            logger.info(f"Session expired for chat {chat_id}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Disco Coop Bot...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å–µ—Å—Å–∏–π
        async def cleanup_task():
            while True:
                await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                await self.cleanup_sessions()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        asyncio.create_task(cleanup_task())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling(drop_pending_updates=True)
        
        logger.info("Bot is running...")
        
        try:
            await asyncio.Future()  # –†–∞–±–æ—Ç–∞–µ–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        except KeyboardInterrupt:
            logger.info("Shutting down bot...")
        finally:
            await self.application.stop()
            await self.application.shutdown()