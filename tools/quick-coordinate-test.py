#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç LLM
–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
"""
import os
import sys
import asyncio
from PIL import Image, ImageDraw

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.vision.screen_analyzer import ScreenAnalyzer
from src.utils.config import Config

async def quick_coordinate_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    print("üéØ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç LLM")
    print("="*50)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config.load('config/config.example.yaml')
        screen_analyzer = ScreenAnalyzer(config)
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        print("üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        screenshot = await screen_analyzer.take_screenshot()
        
        if not screenshot:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
            return
        
        print(f"üìê –†–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {screenshot.size}")
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ
        optimized = screen_analyzer._optimize_screenshot(screenshot)
        print(f"üîß –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {optimized.size}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        optimized.save("current_screenshot.png")
        print("üíæ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: current_screenshot.png")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        game_resolution = screen_analyzer.get_game_resolution()
        print(f"üéÆ –†–µ–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–≥—Ä—ã: {game_resolution}")
        
        print("\n" + "="*50)
        print("üìã –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(f"  ‚Ä¢ LLM –≤–∏–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {optimized.size}")
        print(f"  ‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {game_resolution}")
        print(f"  ‚Ä¢ –§–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: current_screenshot.png")
        print("\nüí° –û—Ç–∫—Ä–æ–π—Ç–µ current_screenshot.png –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≥–¥–µ —Ä–µ–∞–ª—å–Ω–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã")
        print("   –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç LLM")
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        while True:
            print("\n" + "-"*30)
            test_coords = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (x,y) –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip()
            
            if test_coords.lower() == 'q':
                break
                
            try:
                x_str, y_str = test_coords.split(',')
                x = int(x_str.strip())
                y = int(y_str.strip())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                max_x, max_y = optimized.size
                if x < 0 or x >= max_x or y < 0 or y >= max_y:
                    print(f"‚ö†Ô∏è  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({x}, {y}) –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {optimized.size}")
                
                # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ—Ç–º–µ—á–µ–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π
                test_image = optimized.copy()
                draw = ImageDraw.Draw(test_image)
                
                print(f"üéØ –†–∏—Å—É–µ–º –∫—Ä–µ—Å—Ç–∏–∫ —Ç–æ—á–Ω–æ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ({x}, {y})")
                
                # –†–∏—Å—É–µ–º –∫—Ä–µ—Å—Ç–∏–∫ (—Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
                cross_size = 15
                draw.line([(x-cross_size, y), (x+cross_size, y)], fill='red', width=3)
                draw.line([(x, y-cross_size), (x, y+cross_size)], fill='red', width=3)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ —Ü–µ–Ω—Ç—Ä–µ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                dot_size = 2
                draw.ellipse([
                    (x-dot_size, y-dot_size), 
                    (x+dot_size, y+dot_size)
                ], fill='blue', outline='blue')
                
                # –†–∏—Å—É–µ–º –∫—Ä—É–≥
                circle_radius = 25
                draw.ellipse([
                    (x-circle_radius, y-circle_radius), 
                    (x+circle_radius, y+circle_radius)
                ], outline='red', width=2)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                try:
                    from PIL import ImageFont
                    font = ImageFont.load_default()
                    coord_text = f"({x},{y})"
                    draw.text((x+30, y-10), coord_text, fill='white', font=font)
                    draw.text((x+31, y-9), coord_text, fill='red', font=font)  # –¢–µ–Ω—å –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                except:
                    pass
                
                test_filename = f"test_coords_{x}_{y}.png"
                test_image.save(test_filename)
                
                print(f"‚úÖ –¢–æ—á–∫–∞ ({x}, {y}) –æ—Ç–º–µ—á–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ: {test_filename}")
                print(f"   –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥–¥–µ —Ç–æ—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞")
                
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: x,y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500,400)")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(quick_coordinate_test())