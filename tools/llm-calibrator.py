#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç LLM
–ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
"""
import os
import sys
import asyncio
import json
from typing import Optional, Tuple
from PIL import Image, ImageDraw, ImageFont

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.vision.screen_analyzer import ScreenAnalyzer
from src.llm.agent import LLMAgent
from src.utils.config import Config

class LLMCalibrator:
    """–ö–∞–ª–∏–±—Ä–∞—Ç–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç LLM"""
    
    def __init__(self, config_path: str = 'config/config.example.yaml'):
        self.config = Config.load(config_path)
        self.screen_analyzer = ScreenAnalyzer(self.config)
        self.llm_agent = LLMAgent(self.config)
        self.calibration_results = []
    
    async def calibrate_element(self, element_name: str, real_x: int, real_y: int) -> Optional[Tuple[int, int]]:
        """
        –ö–∞–ª–∏–±—Ä—É–µ—Ç –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É/—ç–ª–µ–º–µ–Ω—Ç
        
        Args:
            element_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            real_x, real_y: –†–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
            
        Returns:
            Tuple (offset_x, offset_y) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        print(f"\nüéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {element_name}")
        print(f"   –†–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({real_x}, {real_y})")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot = await self.screen_analyzer.take_screenshot()
            if not screenshot:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
                return None
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ
            optimized = self.screen_analyzer._optimize_screenshot(screenshot)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è LLM
            test_prompt = f"""
–ù–∞–π–¥–∏ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ —ç–ª–µ–º–µ–Ω—Ç: "{element_name}"

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{{"actions": [{{"type": "click", "x": X, "y": Y}}], "description": "–û–ø–∏—Å–∞–Ω–∏–µ", "confidence": "–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è"}}

–ì–¥–µ X, Y - —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¶–ï–ù–¢–†–ê —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ {optimized.size[0]}x{optimized.size[1]}.
"""
            
            print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM...")
            response_data = await self.llm_agent._query_vision_llm(test_prompt, optimized)
            
            if not response_data:
                print("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM")
                return None
            
            response_text = response_data.get('response', '')
            print(f"üîç –û—Ç–≤–µ—Ç LLM: {response_text}")
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            try:
                llm_data = json.loads(response_text)
                actions = llm_data.get('actions', [])
                
                if not actions or actions[0].get('type') != 'click':
                    print("‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∫–ª–∏–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                    return None
                
                llm_x = actions[0].get('x', 0)
                llm_y = actions[0].get('y', 0)
                confidence = llm_data.get('confidence', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                print(f"üß† LLM –≤–∏–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç –≤: ({llm_x}, {llm_y})")
                print(f"üéØ –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: ({real_x}, {real_y})")
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
                offset_x = real_x - llm_x
                offset_y = real_y - llm_y
                
                print(f"üìê –¢—Ä–µ–±—É–µ–º–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è: ({offset_x:+d}, {offset_y:+d})")
                print(f"üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å LLM: {confidence}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = {
                    'element': element_name,
                    'real_coords': (real_x, real_y),
                    'llm_coords': (llm_x, llm_y),
                    'correction': (offset_x, offset_y),
                    'confidence': confidence
                }
                self.calibration_results.append(result)
                
                # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                await self._create_calibration_visualization(
                    optimized, element_name, real_x, real_y, llm_x, llm_y, offset_x, offset_y
                )
                
                return (offset_x, offset_y)
                
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    async def _create_calibration_visualization(
        self, screenshot: Image.Image, element_name: str,
        real_x: int, real_y: int, llm_x: int, llm_y: int,
        offset_x: int, offset_y: int
    ):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        vis_image = screenshot.copy()
        draw = ImageDraw.Draw(vis_image)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç
        try:
            font = ImageFont.load_default()
        except:
            font = None
        
        # –†–∏—Å—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (–∑–µ–ª–µ–Ω—ã–π)
        cross_size = 20
        draw.line([(real_x-cross_size, real_y), (real_x+cross_size, real_y)], fill='green', width=3)
        draw.line([(real_x, real_y-cross_size), (real_x, real_y+cross_size)], fill='green', width=3)
        draw.ellipse([(real_x-25, real_y-25), (real_x+25, real_y+25)], outline='green', width=2)
        
        # –†–∏—Å—É–µ–º –ø–æ–∑–∏—Ü–∏—é LLM (–∫—Ä–∞—Å–Ω—ã–π)
        draw.line([(llm_x-cross_size, llm_y), (llm_x+cross_size, llm_y)], fill='red', width=3)
        draw.line([(llm_x, llm_y-cross_size), (llm_x, llm_y+cross_size)], fill='red', width=3)
        draw.ellipse([(llm_x-25, llm_y-25), (llm_x+25, llm_y+25)], outline='red', width=2)
        
        # –†–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–∫—É –æ—Ç LLM –∫ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        draw.line([(llm_x, llm_y), (real_x, real_y)], fill='yellow', width=2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
        if font:
            draw.text((real_x+30, real_y-10), f"–†–µ–∞–ª—å–Ω–æ ({real_x},{real_y})", fill='green', font=font)
            draw.text((llm_x+30, llm_y+10), f"LLM ({llm_x},{llm_y})", fill='red', font=font)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —É–≥–ª—É
        info_lines = [
            f"–≠–ª–µ–º–µ–Ω—Ç: {element_name}",
            f"–†–µ–∞–ª—å–Ω–æ: ({real_x}, {real_y})",
            f"LLM: ({llm_x}, {llm_y})",
            f"–ö–æ—Ä—Ä–µ–∫—Ü–∏—è: ({offset_x:+d}, {offset_y:+d})"
        ]
        
        # –§–æ–Ω –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_height = len(info_lines) * 20 + 20
        draw.rectangle([(10, 10), (350, info_height)], fill='black', outline='white')
        
        for i, line in enumerate(info_lines):
            draw.text((15, 15 + i * 20), line, fill='white', font=font)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        filename = f"calibration_{element_name.replace(' ', '_').replace("'", '')}.png"
        vis_image.save(filename)
        print(f"üíæ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    
    def calculate_average_correction(self) -> Tuple[int, int]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –ø–æ –≤—Å–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
        if not self.calibration_results:
            return (0, 0)
        
        total_x = sum(result['correction'][0] for result in self.calibration_results)
        total_y = sum(result['correction'][1] for result in self.calibration_results)
        
        avg_x = round(total_x / len(self.calibration_results))
        avg_y = round(total_y / len(self.calibration_results))
        
        return (avg_x, avg_y)
    
    def print_calibration_report(self):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ"""
        if not self.calibration_results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")
            return
        
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –ü–û –ö–ê–õ–ò–ë–†–û–í–ö–ï")
        print("="*60)
        
        for result in self.calibration_results:
            print(f"üéØ {result['element']}:")
            print(f"   –†–µ–∞–ª—å–Ω–æ: {result['real_coords']}")
            print(f"   LLM: {result['llm_coords']}")
            print(f"   –ö–æ—Ä—Ä–µ–∫—Ü–∏—è: {result['correction']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']})")
        
        avg_correction = self.calculate_average_correction()
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø: {avg_correction}")
        print(f"   –í config.yaml:")
        print(f"   llm_coordinate_correction:")
        print(f"     x: {avg_correction[0]}")
        print(f"     y: {avg_correction[1]}")

async def main():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞"""
    print("üéØ –ö–∞–ª–∏–±—Ä–∞—Ç–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç LLM")
    print("–ü–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏")
    print("="*60)
    
    calibrator = LLMCalibrator()
    
    print("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Disco Elysium")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ —ç–∫—Ä–∞–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)")
    print("3. –î–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ —É–∫–∞–∂–∏—Ç–µ –µ—ë —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
    print("4. –°–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–≤–Ω–∏—Ç —Å —Ç–µ–º, —á—Ç–æ –≤–∏–¥–∏—Ç LLM")
    print("5. –í –∫–æ–Ω—Ü–µ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é")
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    suggested_elements = [
        ("–∫–Ω–æ–ø–∫–∞ '–ù–æ–≤–∞—è –∏–≥—Ä–∞'", "–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"),
        ("–∫–Ω–æ–ø–∫–∞ '–ó–∞–≥—Ä—É–∑–∏—Ç—å'", "–ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"),
        ("–∫–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'", "–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã"),
        ("–∫–Ω–æ–ø–∫–∞ '–í—ã—Ö–æ–¥'", "–ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã")
    ]
    
    try:
        while True:
            print("\n" + "-"*40)
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
            print("1. –ö–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç")
            print("2. –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç")
            print("3. –í—ã–π—Ç–∏")
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3): ").strip()
            
            if choice == "1":
                print("\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
                for i, (element, desc) in enumerate(suggested_elements, 1):
                    print(f"  {i}. {desc}")
                print("  0. –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                
                elem_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç (0-4): ").strip()
                
                if elem_choice == "0":
                    element_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞: ").strip()
                elif elem_choice in ["1", "2", "3", "4"]:
                    element_name = suggested_elements[int(elem_choice)-1][0]
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                    continue
                
                try:
                    real_coords = input(f"–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ '{element_name}' (x,y): ").strip()
                    real_x, real_y = map(int, real_coords.split(','))
                    
                    await calibrator.calibrate_element(element_name, real_x, real_y)
                    
                except ValueError:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: x,y")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            elif choice == "2":
                calibrator.print_calibration_report()
            
            elif choice == "3":
                break
            
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\nüõë –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    calibrator.print_calibration_report()

if __name__ == "__main__":
    asyncio.run(main())