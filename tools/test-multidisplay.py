#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—É–ª—å—Ç–∏–¥–∏—Å–ø–ª–µ—è –Ω–∞ Steam Deck
"""
import subprocess
import sys
import os

def test_display_detection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏—Å–ø–ª–µ–µ–≤"""
    print("üñ•Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏—Å–ø–ª–µ–µ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–ø–ª–µ—è—Ö
        result = subprocess.run(['xrandr', '--listmonitors'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ xrandr –¥–æ—Å—Ç—É–ø–µ–Ω")
            print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∏—Å–ø–ª–µ–∏:")
            
            displays = []
            for line in result.stdout.split('\n')[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if line.strip():
                    parts = line.strip().split()
                    if len(parts) >= 4:
                        display_name = parts[-1]
                        geometry = parts[2]
                        primary = '*' in line
                        print(f"  - {display_name}: {geometry} {'(–æ—Å–Ω–æ–≤–Ω–æ–π)' if primary else ''}")
                        
                        # –ü–∞—Ä—Å–∏–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
                        if 'x' in geometry and '+' in geometry:
                            try:
                                size_part = geometry.split('+')[0]
                                offset_parts = geometry.split('+')[1:]
                                
                                if '/' in size_part:
                                    width_part = size_part.split('x')[0]
                                    height_part = size_part.split('x')[1]
                                    width = int(width_part.split('/')[0])
                                    height = int(height_part.split('/')[0])
                                    
                                    # –û—á–∏—â–∞–µ–º offset –æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                                    x_offset_str = offset_parts[0].split()[0]  # "0" –∏–∑ "0 (screen: 0)"
                                    y_offset_str = offset_parts[1].split()[0] if len(offset_parts) > 1 else "0"
                                    x_offset = int(x_offset_str)
                                    y_offset = int(y_offset_str)
                                    
                                    displays.append({
                                        'name': display_name,
                                        'width': width,
                                        'height': height,
                                        'x': x_offset,
                                        'y': y_offset,
                                        'primary': primary
                                    })
                            except (ValueError, IndexError) as e:
                                print(f"  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é {geometry}: {e}")
            
            return displays
        else:
            print("‚ùå xrandr –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return []
            
    except FileNotFoundError:
        print("‚ùå xrandr –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []

def test_window_detection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –æ–∫–Ω–∞ –∏–≥—Ä—ã"""
    print("\nüéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –æ–∫–Ω–∞ –∏–≥—Ä—ã...")
    
    window_titles = ["Disco Elysium", "Disco"]
    
    for title in window_titles:
        try:
            result = subprocess.run(['xdotool', 'search', '--name', title], 
                                  capture_output=True, text=True)
            
            if result.returncode == 0 and result.stdout.strip():
                window_ids = result.stdout.strip().split('\n')
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ–∫–Ω–∞ –¥–ª—è '{title}': {window_ids}")
                
                for window_id in window_ids:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫–Ω–µ
                    geom_result = subprocess.run(['xdotool', 'getwindowgeometry', window_id],
                                               capture_output=True, text=True)
                    
                    if geom_result.returncode == 0:
                        print(f"üìê –û–∫–Ω–æ {window_id}:")
                        for line in geom_result.stdout.split('\n'):
                            if line.strip():
                                print(f"     {line.strip()}")
                
                return window_ids[0]
            else:
                print(f"‚ùå –û–∫–Ω–∞ –¥–ª—è '{title}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except FileNotFoundError:
            print("‚ùå xdotool –Ω–µ –Ω–∞–π–¥–µ–Ω")
            break
    
    return None

def test_coordinate_mapping(displays, window_id):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    print(f"\nüó∫Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...")
    
    if not window_id:
        print("‚ùå –û–∫–Ω–æ –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞
        result = subprocess.run(['xdotool', 'getwindowgeometry', window_id],
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            window_x = window_y = None
            for line in result.stdout.split('\n'):
                if 'Position:' in line:
                    pos_str = line.split('Position:')[1].strip()
                    if ',' in pos_str:
                        window_x = int(pos_str.split(',')[0])
                        window_y = int(pos_str.split(',')[1])
                        break
            
            if window_x is not None and window_y is not None:
                print(f"ü™ü –ü–æ–∑–∏—Ü–∏—è –æ–∫–Ω–∞: ({window_x}, {window_y})")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–º –¥–∏—Å–ø–ª–µ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–∫–Ω–æ
                for display in displays:
                    if (display['x'] <= window_x < display['x'] + display['width'] and
                        display['y'] <= window_y < display['y'] + display['height']):
                        print(f"‚úÖ –û–∫–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –¥–∏—Å–ø–ª–µ–µ: {display['name']}")
                        print(f"   –°–º–µ—â–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è: +{display['x']}+{display['y']}")
                        print(f"   –†–∞–∑–º–µ—Ä –¥–∏—Å–ø–ª–µ—è: {display['width']}x{display['height']}")
                        
                        # –ü—Ä–∏–º–µ—Ä—ã –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                        print(f"\nüìä –ü—Ä–∏–º–µ—Ä—ã –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:")
                        test_coords = [(100, 100), (400, 300), (800, 600)]
                        
                        for orig_x, orig_y in test_coords:
                            mapped_x = orig_x + display['x']
                            mapped_y = orig_y + display['y']
                            print(f"   ({orig_x}, {orig_y}) -> ({mapped_x}, {mapped_y})")
                        
                        return
                
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Å–ø–ª–µ–π –¥–ª—è –æ–∫–Ω–∞")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º—É–ª—å—Ç–∏–¥–∏—Å–ø–ª–µ—è –¥–ª—è Steam Deck")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    tools = ['xrandr', 'xdotool']
    missing_tools = []
    
    for tool in tools:
        try:
            subprocess.run([tool, '--version'], capture_output=True)
            print(f"‚úÖ {tool} –¥–æ—Å—Ç—É–ø–µ–Ω")
        except FileNotFoundError:
            print(f"‚ùå {tool} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            missing_tools.append(tool)
    
    if missing_tools:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(missing_tools)}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo pacman -S xorg-xrandr xorg-xdotool")
        return
    
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ–µ–≤
    displays = test_display_detection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –æ–∫–Ω–∞ –∏–≥—Ä—ã
    window_id = test_window_detection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if displays:
        test_coordinate_mapping(displays, window_id)
    
    print(f"\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if len(displays) > 1:
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º—É–ª—å—Ç–∏–¥–∏—Å–ø–ª–µ—è:")
        print(f"   - –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(displays)} –¥–∏—Å–ø–ª–µ—è(–æ–≤)")
        print(f"   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏")
        print(f"   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ auto_detect_game_screen –≤ config.yaml")
    elif len(displays) == 1:
        print(f"\nüí° –û–¥–∏–Ω –¥–∏—Å–ø–ª–µ–π - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"\n‚ö†Ô∏è  –î–∏—Å–ø–ª–µ–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")

if __name__ == "__main__":
    main()