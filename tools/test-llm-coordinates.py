#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç LLM
–ü–æ–º–æ–≥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ "–≤–∏–¥–∏—Ç" LLM –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
"""
import os
import sys
import asyncio
from typing import Optional, List, Dict, Any
from PIL import Image, ImageDraw, ImageFont
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.vision.screen_analyzer import ScreenAnalyzer
from src.llm.agent import LLMAgent
from src.utils.config import Config

class LLMCoordinateTester:
    """–¢–µ—Å—Ç–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç LLM"""
    
    def __init__(self, config_path: str = 'config/config.example.yaml'):
        self.config = Config.load(config_path)
        self.screen_analyzer = ScreenAnalyzer(self.config)
        self.llm_agent = LLMAgent(self.config)
    
    async def test_coordinates(self, test_prompt: str = "–Ω–∞–π–¥–∏ –∫–Ω–æ–ø–∫—É '–ù–æ–≤–∞—è –∏–≥—Ä–∞'") -> Optional[str]:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã LLM —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
        
        Args:
            test_prompt: –ü—Ä–æ–º—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
        """
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è: '{test_prompt}'")
        
        try:
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            print("üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç...")
            screenshot = await self.screen_analyzer.take_screenshot()
            
            if not screenshot:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
                return None
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞)
            optimized_screenshot = self.screen_analyzer._optimize_screenshot(screenshot)
            print(f"üñº  –†–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {screenshot.size}")
            print(f"üîß –†–∞–∑–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {optimized_screenshot.size}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            test_system_prompt = f"""
–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–≥—Ä—ã Disco Elysium. –ù–∞–π–¥–∏ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ —ç–ª–µ–º–µ–Ω—Ç: "{test_prompt}"

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{{"actions": [{{"type": "click", "x": X, "y": Y}}], "description": "–û–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞", "confidence": "–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è"}}

–ì–¥–µ X, Y - —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–º {optimized_screenshot.size[0]}x{optimized_screenshot.size[1]}.
"""
            
            print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM...")
            response_data = await self.llm_agent._query_vision_llm(
                test_system_prompt,
                optimized_screenshot
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            response = response_data.get('response', '') if response_data else None
            
            if not response:
                print("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM")
                return None
            
            print(f"üîç –û—Ç–≤–µ—Ç LLM: {response}")
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            try:
                llm_data = json.loads(response)
                actions = llm_data.get('actions', [])
                description = llm_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                confidence = llm_data.get('confidence', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
                print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
                
                if not actions:
                    print("‚ö†Ô∏è  –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ—Ç–≤–µ—Ç–µ")
                    return None
                
                # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                visualization_path = await self._create_visualization(
                    optimized_screenshot, actions, description, confidence, test_prompt
                )
                
                return visualization_path
                
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"   –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    async def _create_visualization(
        self, 
        screenshot: Image.Image, 
        actions: List[Dict[str, Any]], 
        description: str, 
        confidence: str, 
        test_prompt: str
    ) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        vis_image = screenshot.copy()
        draw = ImageDraw.Draw(vis_image)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç
        try:
            font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 16)
            small_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 12)
        except:
            try:
                font = ImageFont.load_default()
                small_font = ImageFont.load_default()
            except:
                font = None
                small_font = None
        
        # –†–∏—Å—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        for i, action in enumerate(actions):
            if action.get('type') == 'click':
                x = action.get('x', 0)
                y = action.get('y', 0)
                
                print(f"üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ {i+1}: ({x}, {y})")
                
                # –†–∏—Å—É–µ–º –∫—Ä–µ—Å—Ç–∏–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
                cross_size = 20
                line_width = 3
                
                # –ö—Ä–∞—Å–Ω—ã–π –∫—Ä–µ—Å—Ç–∏–∫
                draw.line(
                    [(x - cross_size, y), (x + cross_size, y)], 
                    fill='red', width=line_width
                )
                draw.line(
                    [(x, y - cross_size), (x, y + cross_size)], 
                    fill='red', width=line_width
                )
                
                # –ö—Ä—É–≥ –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏
                circle_radius = 30
                draw.ellipse(
                    [(x - circle_radius, y - circle_radius), 
                     (x + circle_radius, y + circle_radius)],
                    outline='red', width=2
                )
                
                # –ü–æ–¥–ø–∏—Å—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                coord_text = f"({x}, {y})"
                if font:
                    bbox = draw.textbbox((0, 0), coord_text, font=font)
                    text_width = bbox[2] - bbox[0]
                    text_height = bbox[3] - bbox[1]
                else:
                    text_width, text_height = 100, 20
                
                # –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                text_x = x + 35
                text_y = y - 10
                draw.rectangle(
                    [(text_x - 2, text_y - 2), 
                     (text_x + text_width + 2, text_y + text_height + 2)],
                    fill='white', outline='red'
                )
                
                # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
                draw.text((text_x, text_y), coord_text, fill='red', font=font)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
        info_lines = [
            f"–ü–æ–∏—Å–∫: {test_prompt}",
            f"–†–∞–∑–º–µ—Ä: {screenshot.size[0]}x{screenshot.size[1]}",
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}",
            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}",
            f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–µ–∫: {len([a for a in actions if a.get('type') == 'click'])}"
        ]
        
        # –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_height = len(info_lines) * 20 + 20
        draw.rectangle([(10, 10), (400, info_height)], fill='black', outline='white')
        
        # –†–∏—Å—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        for i, line in enumerate(info_lines):
            draw.text((15, 15 + i * 20), line, fill='white', font=small_font)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_path = f"llm_coordinate_test_{test_prompt.replace(' ', '_').replace("'", '')}.png"
        vis_image.save(output_path)
        
        print(f"üíæ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
        return output_path
    
    async def batch_test(self, test_cases: List[str]) -> None:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–µ–≤ –ø–æ–¥—Ä—è–¥"""
        print(f"üß™ –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ({len(test_cases)} —Ç–µ—Å—Ç–æ–≤)")
        
        results = []
        for i, test_case in enumerate(test_cases, 1):
            print(f"\n{'='*60}")
            print(f"–¢–µ—Å—Ç {i}/{len(test_cases)}: {test_case}")
            print('='*60)
            
            result_path = await self.test_coordinates(test_case)
            results.append((test_case, result_path))
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await asyncio.sleep(1)
        
        print(f"\n{'='*60}")
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print('='*60)
        
        for test_case, result_path in results:
            status = "‚úÖ" if result_path else "‚ùå"
            print(f"{status} {test_case}")
            if result_path:
                print(f"   üìÅ {result_path}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ LLM Coordinate Tester")
    print("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç LLM")
    print("="*60)
    
    tester = LLMCoordinateTester()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è Disco Elysium
    test_cases = [
        "–∫–Ω–æ–ø–∫–∞ '–ù–æ–≤–∞—è –∏–≥—Ä–∞'",
        "–∫–Ω–æ–ø–∫–∞ '–ó–∞–≥—Ä—É–∑–∏—Ç—å'", 
        "–∫–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'",
        "–∫–Ω–æ–ø–∫–∞ '–í—ã—Ö–æ–¥'",
        "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "–ª—é–±–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞"
    ]
    
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:")
    print("1. –û–¥–∏–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç")
    print("2. –ü–∞–∫–µ—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    try:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1/2): ").strip()
        
        if choice == "1":
            test_prompt = input("–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ –∏—Å–∫–∞—Ç—å (–∏–ª–∏ Enter –¥–ª—è '–ù–æ–≤–∞—è –∏–≥—Ä–∞'): ").strip()
            if not test_prompt:
                test_prompt = "–∫–Ω–æ–ø–∫—É '–ù–æ–≤–∞—è –∏–≥—Ä–∞'"
            
            result = await tester.test_coordinates(test_prompt)
            if result:
                print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª: {result}")
            else:
                print("\n‚ùå –¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è")
                
        elif choice == "2":
            await tester.batch_test(test_cases)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())